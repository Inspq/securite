---
- hosts: gia
  vars:
    app: keycloak
    docker_image: jboss/keycloak
    docker_image_version: latest
    app_user: jboss
    app_user_id: 1000
    app_group: jboss
    app_group_id: 1000
    keycloak_internal_port: 8080
    keycloak_data_dir: /opt/jboss/keycloak/standalone/data
  roles:
  - docker-engine
      
  tasks:
    - name: Docker repository logon
      shell: docker login -u {{ docker_registry_username }} -p  {{ docker_registry_password }} -e {{ docker_registry_email }} {{ docker_registry }}
      when: docker_registry_username is defined and docker_registry_password is defined and docker_registry_email is defined
  
    - name: Suppression du conteneur pour {{ app }} 
      docker_container:
        name: "{{ keycloak_container_name }}"
        image: "{{ docker_image }}:{{ docker_image_version }}"
        state: absent
      
    - name: Mettre a jour l'image Docker
      docker_image: 
        name: "{{ docker_image }}"
        tag: "{{ docker_image_version }}"
        pull: true
        state: present
        force: yes

    - name: Créer le groupe
      group:
        name: "{{ app_group }}"
        #gid: "{{ app_group_id }}"
        state: present
        
    - name: Créer l'usager
      user: 
        name: "{{ app_user }}"
        uid: "{{ app_user_id }}"
        non_unique: true
        group: "{{ app_group }}"
        state: present
        
    - name: Creer le repertoire pour le volume des donnees de {{ app }}
      file:
        path: "{{ keycloak_data_volume }}"
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        mode: "u=rwx,g=rwx,o=rwx"
        state: directory
             
    - name: Conteneur {{ app }}
      docker_container:
        name: "{{ keycloak_container_name }}"
        image: "{{ docker_image }}:{{ docker_image_version }}"
        state: started
        restart_policy: unless-stopped
        ports:
        - "{{ keycloak_external_port }}:{{ keycloak_internal_port }}"
        volumes:
        - "{{ keycloak_data_volume }}:{{ keycloak_data_dir }}:Z"
        env:
          "KEYCLOAK_USER": "{{ keycloak_user }}"
          "KEYCLOAK_PASSWORD": "{{ keycloak_password }}"
          "KEYCLOAK_LOGLEVEL": "{{ keycloak_loglevel }}"
          
    - name: Attendre que le serveur keycloak soit disponible
      uri:
        url: "{{ keycloak_url }}/auth/admin/"
        status_code: 200
      register: result
      until: result.status == 200
      retries: 6
      delay: 10
      
    - name: Creer le REALM
      keycloak_realm:
        realm: "{{ keycloak_realm }}"
        name: "{{ keycloak_realm_name }}"
        namehtml: "{{ keycloak_realm_namehtml }}"
        url: "{{ keycloak_url }}"
        username: "{{ keycloak_user }}"
        password: "{{ keycloak_password }}"
        smtpServer: "{{ keycloak_smtpserver }}"
        state : present
      
    - name: Afficher le realm
      debug: 
        var: realm
      